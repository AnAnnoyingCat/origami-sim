#include "crease_constraints.h"
#include <iostream>

static Eigen::VectorXd edge_angle_prev;

void setup_prev_angle(int size){
	edge_angle_prev.resize(size);
	edge_angle_prev.setZero();
}

void F_crease(Eigen::Ref<Eigen::Matrix<double, 12, 1>> f, Eigen::Ref<const Eigen::Vector3d> q1, Eigen::Ref<const Eigen::Vector3d> q2, Eigen::Ref<const Eigen::Vector3d> q3, Eigen::Ref<const Eigen::Vector3d> q4, double k_crease, double theta_target, int creaseID) {
	// Get all the relevant variables together
	double h1, h2;
	Eigen::Vector3d n1, n2;
	double alpha4_31, alpha3_14, alpha4_23, alpha3_42;
	
	geth(h1, q3, q4, q1);
	geth(h2, q3, q4, q2);
	getNormal(n1, q1, q4, q3);
	getNormal(n2, q2, q3, q4);
	getAngle(alpha4_31, q4, q3, q1);
	cot(alpha4_31);						// We only need the cot of the angles, so precompute it
	getAngle(alpha3_14, q3, q1, q4);
	cot(alpha3_14);
	getAngle(alpha4_23, q4, q2, q3);
	cot(alpha4_23);
	getAngle(alpha3_42, q3, q4, q2);
	cot(alpha3_42);

	// Calculate current fold angle theta 
    Eigen::Vector3d crease_dir = (q4 - q3).normalized();
	double current_theta = std::atan2((n1.cross(n2)).dot(crease_dir), n1.dot(n2));

	// Unwrap the angle
	double delta = current_theta - edge_angle_prev(creaseID);
	if (delta > M_PI){
		current_theta -= 2 * M_PI;
	} else if (delta < -M_PI){
		current_theta += 2 * M_PI;
	}
	edge_angle_prev(creaseID) = current_theta;

	// Precompute some values
	Eigen::Vector3d n1h1 = n1 / h1;
	Eigen::Vector3d n2h2 = n2 / h2;
	
	double kdtheta = -k_crease * (current_theta - theta_target);

	// dθ/dp1
	f.segment<3>(0) = kdtheta * n1 / h1;

	// dθ/dp2
	f.segment<3>(3) = kdtheta * n2 / h2;
	
	// dθ/dp3
	f.segment<3>(6) = kdtheta * ((-alpha4_31 / (alpha3_14 + alpha4_31)) * n1h1 + (-alpha4_23 / (alpha3_42 + alpha4_23)) * n2h2);

	// dθ/dp4
	f.segment<3>(9) = kdtheta * ((-alpha3_14 / (alpha3_14 + alpha4_31)) * n1h1 + (-alpha3_42 / (alpha3_42 + alpha4_23)) * n2h2);
}

void F_crease_matlab(Eigen::Ref<Eigen::Matrix<double, 12, 1>> f, Eigen::Ref<const Eigen::Vector3d> q1, Eigen::Ref<const Eigen::Vector3d> q2, Eigen::Ref<const Eigen::Vector3d> q3, Eigen::Ref<const Eigen::Vector3d> q4, double k_crease, double theta_target) {
	
	double q11 = q1(0);
	double q12 = q1(1);
	double q13 = q1(2);
	double q21 = q2(0);
	double q22 = q2(1);
	double q23 = q2(2);
	double q31 = q3(0);
	double q32 = q3(1);
	double q33 = q3(2);
	double q41 = q4(0);
	double q42 = q4(1);
	double q43 = q4(2);

	double A0[1][12];
	double t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t70, t71, t72, t73, t74, t75, t76, t77, t78, t79, t80, t81, t82, t83, t84, t85, t86, t87, t88, t89, t90, t91, t92, t93, t94, t95, t96, t97, t98, t99, t100, t101, t102, t103, t104, t105, t106, t107, t108, t109, t110, t111, t112, t113, t114, t115, t116, t117, t118, t119, t120, t121, t122, t123, t124, t125, t126, t127, t128, t129, t130, t131, t132, t133, t134, t135, t136, t137, t138, t139, t140, t141, t142, t143, t144, t145, t146, t147, t148, t149, t150, t151, t152, t153, t154, t155, t156, t157, t158, t159, t160, t161, t162, t163, t164, t165, t166, t167, t168, t169, t170, t171, t172, t173, t174, t175, t176, t177, t178, t179, t180, t181, t182, t183, t184, t185, t186, t187, t188, t189, t190, t191, t192, t193, t194, t195, t196, t197, t198, t199, t200, t201, t202, t203, t204, t205, t206, t207, t208, t209, t210, t211, t212, t213, t214, t215, t216, t217, t218, t219, t220, t221, t222, t223, t224, t225, t226, t227, t228, t229, t230, t231, t232, t233, t234, t235, t236, t237, t238, t239, t240, t241, t242, t243, t244, t245, t246, t247, t248, t249, t250, t251, t252, t253, t254, t255, t256, t257, t258, t259, t260 = 0.0;
	t2 = -q31;
	t3 = -q32;
	t4 = -q33;
	t5 = -q41;
	t6 = -q42;
	t7 = -q43;
	t8 = q11+t2;
	t9 = q12+t3;
	t10 = q13+t4;
	t11 = q11+t5;
	t12 = q21+t2;
	t13 = q12+t6;
	t14 = q22+t3;
	t15 = q13+t7;
	t16 = q23+t4;
	t17 = q21+t5;
	t18 = q22+t6;
	t19 = q23+t7;
	t20 = q31+t5;
	t21 = q32+t6;
	t22 = q33+t7;
	t23 = fabs(t20);
	t24 = fabs(t21);
	t25 = fabs(t22);
	t26 = (t20/fabs(t20));
	t27 = (t21/fabs(t21));
	t28 = (t22/fabs(t22));
	t32 = t8*t13;
	t33 = t9*t11;
	t34 = t8*t15;
	t35 = t10*t11;
	t36 = t9*t15;
	t37 = t10*t13;
	t38 = t12*t18;
	t39 = t14*t17;
	t40 = t12*t19;
	t41 = t16*t17;
	t42 = t14*t19;
	t43 = t16*t18;
	t29 = t23*t23;
	t30 = t24*t24;
	t31 = t25*t25;
	t44 = -t33;
	t45 = -t35;
	t46 = -t37;
	t47 = -t39;
	t48 = -t41;
	t49 = -t43;
	t50 = t29+t30+t31;
	std::cout << "t50 = " << t50 << std::endl;
	t51 = t32+t44;
	t52 = t34+t45;
	t53 = t36+t46;
	t54 = t38+t47;
	t55 = t40+t48;
	t56 = t42+t49;
	t57 = fabs(t51);
	t58 = fabs(t52);
	t59 = fabs(t53);
	t60 = fabs(t54);
	t61 = fabs(t55);
	t62 = fabs(t56);
	t63 = (t51/fabs(t51));
	t64 = (t52/fabs(t52));
	t65 = (t53/fabs(t53));
	t66 = (t54/fabs(t54));
	t67 = (t55/fabs(t55));
	t68 = (t56/fabs(t56));
	t75 = 1.0/sqrt(t50);
	t69 = t57*t57;
	t70 = t58*t58;
	t71 = t59*t59;
	t72 = t60*t60;
	t73 = t61*t61;
	t74 = t62*t62;
	t76 = t75*t75*t75;
	t77 = t8*t57*t63*2.0;
	t78 = t9*t57*t63*2.0;
	t79 = t8*t58*t64*2.0;
	t80 = t11*t57*t63*2.0;
	t81 = t13*t57*t63*2.0;
	t82 = t10*t58*t64*2.0;
	t83 = t11*t58*t64*2.0;
	t84 = t9*t59*t65*2.0;
	t85 = t10*t59*t65*2.0;
	t86 = t15*t58*t64*2.0;
	t87 = t13*t59*t65*2.0;
	t88 = t20*t57*t63*2.0;
	t89 = t15*t59*t65*2.0;
	t90 = t21*t57*t63*2.0;
	t91 = t20*t58*t64*2.0;
	t92 = t22*t58*t64*2.0;
	t93 = t21*t59*t65*2.0;
	t94 = t22*t59*t65*2.0;
	t95 = t12*t60*t66*2.0;
	t96 = t14*t60*t66*2.0;
	t97 = t12*t61*t67*2.0;
	t98 = t17*t60*t66*2.0;
	t99 = t18*t60*t66*2.0;
	t100 = t16*t61*t67*2.0;
	t101 = t17*t61*t67*2.0;
	t102 = t14*t62*t68*2.0;
	t103 = t20*t60*t66*2.0;
	t104 = t16*t62*t68*2.0;
	t105 = t21*t60*t66*2.0;
	t106 = t19*t61*t67*2.0;
	t107 = t20*t61*t67*2.0;
	t108 = t18*t62*t68*2.0;
	t109 = t19*t62*t68*2.0;
	t110 = t22*t61*t67*2.0;
	t111 = t21*t62*t68*2.0;
	t112 = t22*t62*t68*2.0;
	t113 = -t85;
	t114 = -t89;
	t115 = -t94;
	t116 = -t104;
	t117 = -t109;
	t118 = -t112;
	t119 = t69+t70+t71;
	t120 = t72+t73+t74;
	t125 = t78+t82;
	t126 = t79+t84;
	t127 = t81+t86;
	t128 = t83+t87;
	t129 = t90+t92;
	t130 = t91+t93;
	t131 = t96+t100;
	t132 = t97+t102;
	t133 = t99+t106;
	t134 = t101+t108;
	t135 = t105+t110;
	t136 = t107+t111;
	t121 = 1.0/sqrt(t119);
	t123 = 1.0/sqrt(t120);
	t137 = t77+t113;
	t138 = t80+t114;
	t139 = t88+t115;
	t140 = t95+t116;
	t141 = t98+t117;
	t142 = t103+t118;
	t122 = t121*t121*t121;
	t124 = t123*t123*t123;
	t143 = t12*t51*t121*t123;
	t144 = t14*t51*t121*t123;
	t145 = t12*t52*t121*t123;
	t146 = t16*t51*t121*t123;
	t147 = t14*t52*t121*t123;
	t148 = t12*t53*t121*t123;
	t149 = t16*t52*t121*t123;
	t150 = t14*t53*t121*t123;
	t151 = t17*t51*t121*t123;
	t152 = t16*t53*t121*t123;
	t153 = t18*t51*t121*t123;
	t154 = t17*t52*t121*t123;
	t155 = t19*t51*t121*t123;
	t156 = t18*t52*t121*t123;
	t157 = t17*t53*t121*t123;
	t158 = t19*t52*t121*t123;
	t159 = t18*t53*t121*t123;
	t160 = t20*t51*t121*t123;
	t161 = t19*t53*t121*t123;
	t162 = t21*t51*t121*t123;
	t163 = t20*t52*t121*t123;
	t164 = t22*t51*t121*t123;
	t165 = t21*t52*t121*t123;
	t166 = t20*t53*t121*t123;
	t167 = t22*t52*t121*t123;
	t168 = t8*t54*t121*t123;
	t169 = t21*t53*t121*t123;
	t170 = t9*t54*t121*t123;
	t171 = t22*t53*t121*t123;
	t172 = t8*t55*t121*t123;
	t173 = t10*t54*t121*t123;
	t174 = t9*t55*t121*t123;
	t175 = t8*t56*t121*t123;
	t176 = t10*t55*t121*t123;
	t177 = t9*t56*t121*t123;
	t178 = t11*t54*t121*t123;
	t179 = t10*t56*t121*t123;
	t180 = t13*t54*t121*t123;
	t181 = t11*t55*t121*t123;
	t182 = t15*t54*t121*t123;
	t183 = t13*t55*t121*t123;
	t184 = t11*t56*t121*t123;
	t185 = t15*t55*t121*t123;
	t186 = t13*t56*t121*t123;
	t187 = t15*t56*t121*t123;
	t188 = t20*t54*t121*t123;
	t189 = t21*t54*t121*t123;
	t190 = t20*t55*t121*t123;
	t191 = t22*t54*t121*t123;
	t192 = t21*t55*t121*t123;
	t193 = t20*t56*t121*t123;
	t194 = t22*t55*t121*t123;
	t195 = t21*t56*t121*t123;
	t196 = t22*t56*t121*t123;
	t209 = t51*t54*t121*t123;
	t210 = t51*t55*t121*t123;
	t211 = t52*t54*t121*t123;
	t212 = t51*t56*t121*t123;
	t213 = t52*t55*t121*t123;
	t214 = t53*t54*t121*t123;
	t215 = t52*t56*t121*t123;
	t216 = t53*t55*t121*t123;
	t217 = t53*t56*t121*t123;
	t197 = -t168;
	t198 = -t170;
	t199 = -t172;
	t200 = -t173;
	t201 = -t176;
	t202 = -t177;
	t203 = -t178;
	t204 = -t180;
	t205 = -t181;
	t206 = -t182;
	t207 = -t185;
	t208 = -t186;
	t218 = -t209;
	t219 = -t211;
	t220 = -t213;
	t221 = -t214;
	t222 = -t216;
	t223 = -t217;
	t250 = t209+t213+t217;
	t224 = t210+t219;
	t225 = t212+t221;
	t226 = t215+t222;
	t251 = t250*t250;
	t252 = 1.0/t250;
	t227 = t75*t224;
	t228 = t75*t225;
	t229 = t75*t226;
	t238 = t20*t23*t26*t76*t224;
	t239 = t20*t24*t27*t76*t224;
	t240 = t20*t25*t28*t76*t224;
	t241 = t21*t23*t26*t76*t225;
	t242 = t21*t24*t27*t76*t225;
	t243 = t21*t25*t28*t76*t225;
	t244 = t22*t23*t26*t76*t226;
	t245 = t22*t24*t27*t76*t226;
	t246 = t22*t25*t28*t76*t226;
	t253 = 1.0/t251;
	t230 = -t227;
	t231 = -t228;
	t232 = t20*t227;
	t233 = t21*t228;
	t234 = t22*t229;
	t247 = -t240;
	t248 = -t243;
	t249 = -t246;
	t235 = t232*sqrt(-1.0);
	t236 = t233*sqrt(-1.0);
	t237 = t234*sqrt(-1.0);
	t254 = t232+t233+t234;
	t255 = t254*t254;
	t258 = t218+t220+t223+t235+t236+t237;
	t256 = t251+t255;
	std::cout << "t258 - " << t258 << std::endl;
	t259 = log(t258/fabs(t258))*-sqrt(-1.0);
	t257 = 1.0/t256;
	std::cout << "t250 = " << t250 << std::endl;
	std::cout << "t258 = " << t258 << std::endl;
	A0[0][0] = -k_crease*t251*t257*(t259-theta_target)*(t252*(-t20*t75*(t191-t192+(t51*t55*t122*t123*t129)/2.0-(t52*t54*t122*t123*t129)/2.0)+t21*t75*(t195-(t51*t56*t122*t123*t129)/2.0+(t53*t54*t122*t123*t129)/2.0)+t22*t75*(t196-(t52*t56*t122*t123*t129)/2.0+(t53*t55*t122*t123*t129)/2.0))+t253*t254*(-t189-t194+(t51*t54*t122*t123*t129)/2.0+(t52*t55*t122*t123*t129)/2.0+(t53*t56*t122*t123*t129)/2.0));
	A0[0][1] = k_crease*t251*t257*(t252*(t20*t75*(t190-(t51*t55*t122*t123*t139)/2.0+(t52*t54*t122*t123*t139)/2.0)+t22*t75*(t194-(t52*t56*t122*t123*t139)/2.0+(t53*t55*t122*t123*t139)/2.0)+t21*t75*(t191+t193-(t51*t56*t122*t123*t139)/2.0+(t53*t54*t122*t123*t139)/2.0))+t253*t254*(-t188+t196+(t51*t54*t122*t123*t139)/2.0+(t52*t55*t122*t123*t139)/2.0+(t53*t56*t122*t123*t139)/2.0))*(t259-theta_target);
	A0[0][2] = -k_crease*t251*t257*(t259-theta_target)*(t252*(t22*t75*(t192-t193+(t52*t56*t122*t123*t130)/2.0-(t53*t55*t122*t123*t130)/2.0)+t20*t75*(t188+(t51*t55*t122*t123*t130)/2.0-(t52*t54*t122*t123*t130)/2.0)+t21*t75*(t189+(t51*t56*t122*t123*t130)/2.0-(t53*t54*t122*t123*t130)/2.0))-t253*t254*(-t190-t195+(t51*t54*t122*t123*t130)/2.0+(t52*t55*t122*t123*t130)/2.0+(t53*t56*t122*t123*t130)/2.0));
	A0[0][3] = k_crease*t251*t257*(t259-theta_target)*(t252*(-t20*t75*(t164-t165-(t51*t55*t121*t124*t135)/2.0+(t52*t54*t121*t124*t135)/2.0)+t21*t75*(t169+(t51*t56*t121*t124*t135)/2.0-(t53*t54*t121*t124*t135)/2.0)+t22*t75*(t171+(t52*t56*t121*t124*t135)/2.0-(t53*t55*t121*t124*t135)/2.0))-t253*t254*(-t162-t167+(t51*t54*t121*t124*t135)/2.0+(t52*t55*t121*t124*t135)/2.0+(t53*t56*t121*t124*t135)/2.0));
	A0[0][4] = -k_crease*t251*t257*(t252*(t20*t75*(t163+(t51*t55*t121*t124*t142)/2.0-(t52*t54*t121*t124*t142)/2.0)+t22*t75*(t167+(t52*t56*t121*t124*t142)/2.0-(t53*t55*t121*t124*t142)/2.0)+t21*t75*(t164+t166+(t51*t56*t121*t124*t142)/2.0-(t53*t54*t121*t124*t142)/2.0))-t253*t254*(-t160+t171+(t51*t54*t121*t124*t142)/2.0+(t52*t55*t121*t124*t142)/2.0+(t53*t56*t121*t124*t142)/2.0))*(t259-theta_target);
	A0[0][5] = k_crease*t251*t257*(t259-theta_target)*(t252*(t22*t75*(t165-t166-(t52*t56*t121*t124*t136)/2.0+(t53*t55*t121*t124*t136)/2.0)+t20*t75*(t160-(t51*t55*t121*t124*t136)/2.0+(t52*t54*t121*t124*t136)/2.0)+t21*t75*(t162-(t51*t56*t121*t124*t136)/2.0+(t53*t54*t121*t124*t136)/2.0))+t253*t254*(-t163-t169+(t51*t54*t121*t124*t136)/2.0+(t52*t55*t121*t124*t136)/2.0+(t53*t56*t121*t124*t136)/2.0));
	A0[0][6] = k_crease*t251*t257*(t252*(t230+t238+t241+t244-t21*t75*(t159+t208+(t51*t56*t122*t123*t127)/2.0-(t53*t54*t122*t123*t127)/2.0+(t51*t56*t121*t124*t133)/2.0-(t53*t54*t121*t124*t133)/2.0)+t20*t75*(t155-t156+t183+t206-(t51*t55*t122*t123*t127)/2.0+(t52*t54*t122*t123*t127)/2.0-(t51*t55*t121*t124*t133)/2.0+(t52*t54*t121*t124*t133)/2.0)-t22*t75*(t161-t187+(t52*t56*t122*t123*t127)/2.0-(t53*t55*t122*t123*t127)/2.0+(t52*t56*t121*t124*t133)/2.0-(t53*t55*t121*t124*t133)/2.0))+t253*t254*(-t153-t158+t204+t207+(t51*t54*t122*t123*t127)/2.0+(t52*t55*t122*t123*t127)/2.0+(t53*t56*t122*t123*t127)/2.0+(t51*t54*t121*t124*t133)/2.0+(t52*t55*t121*t124*t133)/2.0+(t53*t56*t121*t124*t133)/2.0))*(t259-theta_target);
	A0[0][7] = k_crease*t251*t257*(t259-theta_target)*(t252*(t231+t239+t242+t245+t20*t75*(t154+t205+(t51*t55*t122*t123*t138)/2.0-(t52*t54*t122*t123*t138)/2.0+(t51*t55*t121*t124*t141)/2.0-(t52*t54*t121*t124*t141)/2.0)+t22*t75*(t158+t207+(t52*t56*t122*t123*t138)/2.0-(t53*t55*t122*t123*t138)/2.0+(t52*t56*t121*t124*t141)/2.0-(t53*t55*t121*t124*t141)/2.0)+t21*t75*(t155+t157-t184+t206+(t51*t56*t122*t123*t138)/2.0-(t53*t54*t122*t123*t138)/2.0+(t51*t56*t121*t124*t141)/2.0-(t53*t54*t121*t124*t141)/2.0))-t253*t254*(-t151+t161+t187+t203+(t51*t54*t122*t123*t138)/2.0+(t52*t55*t122*t123*t138)/2.0+(t51*t54*t121*t124*t141)/2.0+(t53*t56*t122*t123*t138)/2.0+(t52*t55*t121*t124*t141)/2.0+(t53*t56*t121*t124*t141)/2.0));
	A0[0][8] = -k_crease*t251*t257*(t252*(t229+t247+t248+t249+t20*t75*(t151+t203-(t51*t55*t122*t123*t128)/2.0+(t52*t54*t122*t123*t128)/2.0-(t51*t55*t121*t124*t134)/2.0+(t52*t54*t121*t124*t134)/2.0)+t21*t75*(t153+t204-(t51*t56*t122*t123*t128)/2.0+(t53*t54*t122*t123*t128)/2.0-(t51*t56*t121*t124*t134)/2.0+(t53*t54*t121*t124*t134)/2.0)+t22*t75*(t156-t157-t183+t184-(t52*t56*t122*t123*t128)/2.0+(t53*t55*t122*t123*t128)/2.0-(t52*t56*t121*t124*t134)/2.0+(t53*t55*t121*t124*t134)/2.0))+t253*t254*(-t154-t159+t205+t208+(t51*t54*t122*t123*t128)/2.0+(t52*t55*t122*t123*t128)/2.0+(t53*t56*t122*t123*t128)/2.0+(t51*t54*t121*t124*t134)/2.0+(t52*t55*t121*t124*t134)/2.0+(t53*t56*t121*t124*t134)/2.0))*(t259-theta_target);
	A0[0][9] = -k_crease*t251*t257*(t252*(t230+t238+t241+t244-t21*t75*(t150+t202+(t51*t56*t122*t123*t125)/2.0-(t53*t54*t122*t123*t125)/2.0+(t51*t56*t121*t124*t131)/2.0-(t53*t54*t121*t124*t131)/2.0)+t20*t75*(t146-t147+t174+t200-(t51*t55*t122*t123*t125)/2.0+(t52*t54*t122*t123*t125)/2.0-(t51*t55*t121*t124*t131)/2.0+(t52*t54*t121*t124*t131)/2.0)-t22*t75*(t152-t179+(t52*t56*t122*t123*t125)/2.0-(t53*t55*t122*t123*t125)/2.0+(t52*t56*t121*t124*t131)/2.0-(t53*t55*t121*t124*t131)/2.0))+t253*t254*(-t144-t149+t198+t201+(t51*t54*t122*t123*t125)/2.0+(t52*t55*t122*t123*t125)/2.0+(t53*t56*t122*t123*t125)/2.0+(t51*t54*t121*t124*t131)/2.0+(t52*t55*t121*t124*t131)/2.0+(t53*t56*t121*t124*t131)/2.0))*(t259-theta_target);
	A0[0][10] = -k_crease*t251*t257*(t259-theta_target)*(t252*(t231+t239+t242+t245+t20*t75*(t145+t199+(t51*t55*t122*t123*t137)/2.0-(t52*t54*t122*t123*t137)/2.0+(t51*t55*t121*t124*t140)/2.0-(t52*t54*t121*t124*t140)/2.0)+t22*t75*(t149+t201+(t52*t56*t122*t123*t137)/2.0-(t53*t55*t122*t123*t137)/2.0+(t52*t56*t121*t124*t140)/2.0-(t53*t55*t121*t124*t140)/2.0)+t21*t75*(t146+t148-t175+t200+(t51*t56*t122*t123*t137)/2.0-(t53*t54*t122*t123*t137)/2.0+(t51*t56*t121*t124*t140)/2.0-(t53*t54*t121*t124*t140)/2.0))-t253*t254*(-t143+t152+t179+t197+(t51*t54*t122*t123*t137)/2.0+(t52*t55*t122*t123*t137)/2.0+(t51*t54*t121*t124*t140)/2.0+(t53*t56*t122*t123*t137)/2.0+(t52*t55*t121*t124*t140)/2.0+(t53*t56*t121*t124*t140)/2.0));
	A0[0][11] = k_crease*t251*t257*(t252*(t229+t247+t248+t249+t20*t75*(t143+t197-(t51*t55*t122*t123*t126)/2.0+(t52*t54*t122*t123*t126)/2.0-(t51*t55*t121*t124*t132)/2.0+(t52*t54*t121*t124*t132)/2.0)+t21*t75*(t144+t198-(t51*t56*t122*t123*t126)/2.0+(t53*t54*t122*t123*t126)/2.0-(t51*t56*t121*t124*t132)/2.0+(t53*t54*t121*t124*t132)/2.0)+t22*t75*(t147-t148-t174+t175-(t52*t56*t122*t123*t126)/2.0+(t53*t55*t122*t123*t126)/2.0-(t52*t56*t121*t124*t132)/2.0+(t53*t55*t121*t124*t132)/2.0))+t253*t254*(-t145-t150+t199+t202+(t51*t54*t122*t123*t126)/2.0+(t52*t55*t122*t123*t126)/2.0+(t53*t56*t122*t123*t126)/2.0+(t51*t54*t121*t124*t132)/2.0+(t52*t55*t121*t124*t132)/2.0+(t53*t56*t121*t124*t132)/2.0))*(t259-theta_target);

	for (int i = 0; i < 12; i++){
		f(i) = A0[0][i];
	}
}